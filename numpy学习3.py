import numpy as np
#创建自己的ufunc
def myadd(x,y):
    return x+y
myadd=np.frompyfunc(myadd,2,1)#将函数转换为ufunc,2表示输入参数个数，1表示输出参数个数
print(myadd([1,2,3,4],[5,6,7,8]))
#检查一个函数是否为ufunc
print(type(np.add))#输出<class 'numpy.ufunc'>
print(type(np.concatenate))#输出<class 'function'>
#numpy的求和
#newarr=np.sum([arr1,arr2],axis=1)
arr=np.array([1,2,3,4])
arr1=np.array([5,6,7,8])
newarr=np.sum(arr,arr1)
print(newarr)
#累加：例如[1,2,3,4]的累加为[1,3,6,10]
newarr=np.cumsum(arr)
print(newarr)
#numpy乘积
newarr=np.prod(arr)
print(newarr)
#累乘，例如[1,2,3,4]的累乘为[1,2,6,24]
newarr=np.cumprod(arr)
print(newarr)
#差分：计算数组中相邻元素之间的差值
newarr=np.diff(arr)
print(newarr)
#二阶差分
newarr=np.diff(arr,n=2)
print(newarr)
#最小公倍数
x=np.lcm(3,6)
#数组中的最小公倍数
newarr=np.lcm.reduce([3,6,9])
print(newarr)
#最大公约数
x=np.gcd(3,6)
#数组中的最大公约数
newarr=np.gcd.reduce([3,6,9])
print(newarr)
#三角函数
newarr=np.sin(arr)
newarr=np.cos(arr)
newarr=np.tan(arr)
#反三角函数
newarr=np.arcsin(arr)
newarr=np.arccos(arr)
newarr=np.arctan(arr)
#双曲函数
newarr=np.sinh(arr)
newarr=np.cosh(arr)
newarr=np.tanh(arr)
#反双曲函数
newarr=np.arcsinh(arr)
newarr=np.arccosh(arr)
newarr=np.arctanh(arr)
#集合函数：使用unique()函数查找数组中的唯一值
arr=np.array([1,2,3,4])
newarr=np.unique(arr)
#集合只能是一维数组
#寻找联合
arr1=np.array([1,2,3,4])
arr2=np.array([3,4,5,6])
newarr=np.union1d(arr1,arr2)
#寻找交集
newarr=np.intersect1d(arr1,arr2)
#寻找差集
newarr=np.setdiff1d(arr1,arr2)
#寻找异或
newarr=np.setxor1d(arr1,arr2)